pipeline {
    environment {
        env = 'non-prod'
        registryCredential = "registryCredential"
        version_tag = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
    }
    agent any
    stages {
        stage('Pull image') {
            when { expression { return env.env == 'non-prod'} }
            steps {
                script {
                    a = docker.image("maven:3-alpine")
                    b = docker.image("adoptopenjdk/openjdk8-openj9")
                    docker.withRegistry('', "${env.registryCredential}") {
                        a.pull()
                        b.pull()
                    }
                }
            }
        }

        stage('Build App With Maven') {
            when { expression { return env.env == 'non-prod'} }
            agent {
                 docker {
                    image "maven:3-alpine"
                    args '-u root'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    mvn package -DskipTests
                    chown -hR 989 target
                    chgrp -hR 983 target
                    pwd
                    ls -al
                ''' 
            }
        }

        stage('Build DockerFile And Push') {
            when { expression { return env.env == 'non-prod'} }
            steps {
                script {
                    docker.withRegistry("", "${env.registryCredential}") {
                        a = docker.build("narawitrt" + "/" + "demo-service" + ":"+"${env.version_tag}", "-f Dockerfile .")
                    }
                    docker.withRegistry("", "${env.registryCredential}") {
                        a.push()
                    }
                }
            }
        }

        stage('Cleanup') {
            when { expression { return env.env == 'non-prod'} }
            steps {
                script {
                    sh "docker rmi narawitrt" + "/" + "demo-service" + ":"+"${env.version_tag}" 
                }      
            }
        }

        stage('Apply Environment variable to deployment file') {
            steps {
                script {
                    // load "config/pod-sizing-${env.env}.groovy"
                    echo "hellow"
                }
            }
        }
    
    }
}