pipeline {
    environment {
        env = 'non-prod'
        registryCredential = "registryCredential"
        version_tag = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
        variable_prod="production-chan!!"
        variable_non_prod="non-production-kun"
    }
    agent any
    stages {
        stage('Pull image') {
            steps {
                script {
                    a = docker.image("maven:3-alpine")
                    b = docker.image("adoptopenjdk/openjdk8-openj9")
                    docker.withRegistry('', "${env.registryCredential}") {
                        a.pull()
                        b.pull()
                    }
                }
            }
        }

        stage('Build App With Maven') {
            agent {
                 docker {
                    image "maven:3-alpine"
                    args '-v /data/mvn/.m2:/root/.m2:z -u root'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    mvn package -DskipTests
                    chown -hR 989 target
                    chgrp -hR 983 target
                    pwd
                    ls -al
                ''' 
            }
        }

        stage('Build DockerFile And Push') {
            steps {
                script {
                    docker.withRegistry("", "${env.registryCredential}") {
                        a = docker.build("narawitrt" + "/" + "demo-service" + ":"+"${env.version_tag}", "-f Dockerfile .")
                    }
                    docker.withRegistry("", "${env.registryCredential}") {
                        a.push()
                    }
                }
            }
        }

        stage('Deploy Service') {
            steps {
                script {
                    
                            sh '''
                                docker stop non-prod-server
                                docker rm non-prod-server
                                docker run -d -p 8081:8090 --name non-prod-server --env USERHELLO=${variable_non_prod} narawitrt/demo-service:${version_tag}
                               '''
                    
                }
            }
        }

        stage('create secret and deploy app to kube cluster') {
            agent {
                  docker {
                    image "alpine/k8s:1.19.8"
                    reuseNode true
                }
            }
            steps {
                withKubeConfig([credentialsId: 'kube_credential', serverUrl: 'https://172.16.16.100:6443']) {
                    script {
                        // sh """
                        // echo ${env.imageToDeploy}
                        // ls -al manifests
                        // cat manifests/deployment.yaml
                        // cat manifests/service.yaml
                        // cat manifests/ingress.yaml
                        // mv src/main/resources/keys/public_key_${env.env}.pem src/main/resources/keys/public_key.pem
                        // kubectl create secret tls $serviceName-cert --key cert/$project-${env.env}.krungthai.key --cert cert/${project}-${env.env}.krungthai.cer -n $namespace -o yaml --dry-run | kubectl replace -f -
                        // kubectl create secret tls $serviceName-svc-cert --key cert/${project}svc-${env.env}.krungthai.key --cert cert/${project}svc-${env.env}.krungthai.pem -n $namespace -o yaml --dry-run | kubectl replace -f -
                        // kubectl create secret generic $serviceName-${env.env}-secret --from-env-file=.env_${env.env} -n $namespace -o yaml --dry-run | kubectl replace -f -
                        // kubectl create secret generic $serviceName-${env.env}-secret-file --from-file=src/main/resources/cert.jks --from-file=src/main/resources/cbs.jks --from-file=src/main/resources/keys/public_key.pem -n $namespace -o yaml --dry-run | kubectl replace -f -
                        // kubectl apply -n $namespace -f manifests/deployment.yaml
                        // kubectl apply -n $namespace -f manifests/service.yaml
                        // kubectl apply -n $namespace -f manifests/ingress.yaml
                        // """
                        sh "kubectl get no"
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // sh "docker rmi narawitrt" + "/" + "demo-service" + ":"+"${env.version_tag}" 
                    echo "cleanup"
                }      
            }
        }

        
    
    }
    post {
        always {
            emailext body: 'A Test EMail', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Test'
        }
    }
}